# -*- coding: utf-8 -*-
"""
=====================
Image Deconvolution
=====================

In this example, we deconvolve a noisy version of an image using Wiener
and unsupervised Wiener algorithms. This algorithms are based on
linear models that can't restore sharp edge as much as non-linear
methods (like TV restoration) but are much faster.

Wiener filter
-------------
The inverse filter based on the PSF (Point Spread Function),
the prior regularisation (penalisation of high frequency) and the
tradeoff between the data and prior adequacy. The regularization
parameter must be hand tuned.

Unsupervised Wiener
-------------------
This algorithm has a self-tuned regularisation parameters based on
data learning. This is not common and based on the following
publication. The algorithm is based on a iterative Gibbs sampler that
draw alternatively samples of posterior conditional law of the image,
the noise power and the image frequency power.

.. [1] François Orieux, Jean-François Giovannelli, and Thomas
       Rodet, "Bayesian estimation of regularization and point
       spread function parameters for Wiener-Hunt deconvolution",
       J. Opt. Soc. Am. A 27, 1593-1607 (2010)
"""
import numpy as np
import matplotlib.pyplot as plt

from skimage import color, data, restoration
import cv2


def weiner_filter(img,psf):
    astro = color.rgb2gray(data.astronaut())

    print "running Weiner for a channel"
    #print astro
    #print np.max(astro)
    #print np.min(astro)

    # img1 = cv2.normalize(img)
    # cv2.normalize(img,img,0,1.0,cv2.NORM_MINMAX,cv2.CV_32F)


    out = np.ndarray(shape=img.shape, dtype=np.float64)  # redifine to correct type
    out = np.copy(img)
    min_intensity = np.amin(img)
    out = out - min_intensity
    max_intensity = np.amax(out)

    out = out * (1.0 / max_intensity)

    img = out

    # img = img1
    # img = img/255.0
    print np.max(img)
    print np.min(img)

    from scipy.signal import convolve2d as conv2

    #psf = np.ones((5, 5)) / 25.0
    astro = conv2(astro, psf, 'same')
    astro += 0.22 * astro.std() * np.random.standard_normal(astro.shape)

    deconvolved, _ = restoration.unsupervised_wiener(img, psf)
    #deconvolved  = restoration.wiener(img, psf, 500)
    #deconvolved  = restoration.richardson_lucy(img, psf, 500)

    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(8, 5),
                       sharex=True, sharey=True,
                       subplot_kw={'adjustable': 'box-forced'})

    plt.gray()

    ax[0].imshow(img, vmin=deconvolved.min(), vmax=deconvolved.max())
    ax[0].axis('off')
    ax[0].set_title('Data')

    ax[1].imshow(deconvolved)
    ax[1].axis('off')
    ax[1].set_title('Self tuned restoration')

    fig.tight_layout()

    #plt.show()
    return deconvolved


def generate_PSF(kernlen=21, nsig=3):
    import numpy as np
    import scipy.ndimage.filters as fi


    # create nxn zeros
    inp = np.zeros((kernlen, kernlen))
    # set element at the middle to one, a dirac delta
    inp[kernlen//2, kernlen//2] = 1
    # gaussian-smooth the dirac, resulting in a gaussian filter mask
    value = fi.gaussian_filter(inp, nsig)
    #print value
    return value


def run_weiner(outimg,psf):
    image = '/home/dpant/CP/FinalProject/images_self/ab.png'
    image =  "/home/dpant/CP/FinalProject/text.png"
    img_org = cv2.imread(image)
    img = img_org
    num_channels = img.shape[2]
    #img = cv2.cvtColor(img_org, cv2.COLOR_BGR2GRAY)
    #hdr_image = np.zeros(images[0].shape, dtype=np.float64)
    final_image = np.zeros(img.shape, dtype=np.float64)
    #img = restoration.denoise_bilateral(img)
    #(img, sigma_color=0.05, sigma_spatial=15)
    cv2.imwrite("denoise.png",final_image)
    psf = fspecial(8,img.shape[0])
    for channel in range(num_channels):

        # collect the current layer of each input image
        layer_stack = img[:, :, channel]
        #layer_stack = [img[:, :, channel] for img in images]
        channel_res = weiner_filter(layer_stack,psf)
        min = np.min(channel_res)
        channel_res -= min
        max = np.max(channel_res)
        channel_res = channel_res/max
        channel_res *= 255.0
        # Sample image intensities
        #intensity_samples = sampleIntensities(layer_stack, num_points)
        final_image[..., channel] = channel_res

    cv2.imwrite(outimg,final_image)
np.set_printoptions(precision=3,threshold=1000,linewidth=1000)
#threshold=None, edgeitems=None,
def fspecial(rad,mat_size=0):
    if not mat_size:
        mat_size = 2* rad + 1

    def getnc(x):
        return x - mat_size/2

    mat = np.zeros( (mat_size,mat_size) )
    for i in range(mat_size):
        for j in range(mat_size):
            x = getnc(i)
            y = getnc(j)
            r = np.sqrt(x*x + y*y)
            #print r ,  rad
            #if(r<=rad):
            #    print x, y
            mat[i,j] = (r <= rad)
    print mat
    mat = mat/np.sum(mat)
    print mat
    print mat.shape

    return mat
if __name__ == '__main__':
  #main()
  #numpy.loadtxt(fname, dtype=<type 'float'>, comments='#', delimiter=None)

  import sys

  #sys.exit()
  psf = np.loadtxt('psf8.txt', dtype=np.float, comments='#', delimiter=',')
  psf = np.ones((17, 17)) / (17.0 * 17.0)
  psf = fspecial(8)
  v = generate_PSF(5,0.5)
  #print  np.sum(v)
  for cnt in range(30,31):
    #psf = generate_PSF(cnt,0.5)
    #psf = np.ones((cnt, cnt)) / (cnt * cnt * 1.0)
    outimg = "final_" + str(cnt) + ".png"
    run_weiner(outimg,psf)


